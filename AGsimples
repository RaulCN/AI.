#algorítimo atualizado para python 3, estava em python 2 e traduzindo para português
#modificado por topiarau
#fonte https://gist.github.com/josephmisiti/940cee03c97f031188ba7eac74d03a4f

"""
helloevolve.py (nome do arquivo original)implementa um algoritmo genético que começa com a população bade de cadeia de caracteres (string) geradas aleatoriamente ,
interage através de um certo número de gerações enquanto implementa "seleção natural", e imprimi a corda mais adequada

The parameters of the simulation can be changed by modifying one of the many
global variables. To change the "most fit" string, modify OPTIMAL. POP_SIZE
controls the size of each generation, and GENERATIONS is the amount of 
generations that the simulation will loop through before returning the fittest
string.

Os parâmetros da simulação podem ser mudados modificando uma das muitas variáveis globais.
Para mudar a "mais adequada" string, modifique OPTIMAL. POP_SIZE controla o tamanho de cada geração,
e GENERATIONS é a quantidade de gerações que a simulação irá rodar antes de retornar a string adequada.

This program subject to the terms of the BSD license listed below.



---

Copyright (c) 2011 Colin Drake

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import random

#
# Variáveis globais
# Configuração ideal da string e variáveis de entrada do AG.

#

OPTIMAL     = "Olá, Mundo"
DNA_SIZE    = len(OPTIMAL)
POP_SIZE    = 40
GENERATIONS = 8000


#
# Funções auxiliares
# São usadas como suporte, mas não são diretamente funções específicas do AG.

#

def weighted_choice(items):
  """Escolhe um elemento aleatório dos itens, onde itens é uma lista de tuplas na forma (item, peso). 
  Peso determina a probabilidade de escolher seu respectivo item.
  Nota: essa função foi pega da ActiveState Recipes. 

  """
  weight_total = sum((item[1] for item in items))
  n = random.uniform(0, weight_total)
  for item, weight in items:
    if n < weight:
      return item
    n = n - weight
  return item

def random_char():
  """
  Retorna um carácter aleatório entre ASCII 32 e 126 (i.e. espaços, símbolos, letras e dígitos).
  Todos os caracteres retornados serão imprimiveis. 

  """
  return chr(int(random.randrange(32, 126, 1)))

def random_population():

  """_Retorna uma lista de individuais do POP_SIZE, cada um gerado aleatoriamente via repetição.
 DNA_SIZE  organiza para gerar uma string de caracteres aleatórios com random_char()._
  """
  pop = []
  for i in range(POP_SIZE):
    dna = ""
    for c in range(DNA_SIZE):
      dna += random_char()
    pop.append(dna)
  return pop

#
# AG funções
# These make up the bulk of the actual GA algorithm.
#

def fitness(dna):
  """
  Para cada gene no DNA, essa função calcula a diferença entre isso e o caracter na mesma posição na string OPTIMAL. 
  Esses valores são somados e retornados.

  """
  fitness = 0
  for c in range(DNA_SIZE):
    fitness += abs(ord(dna[c]) - ord(OPTIMAL[c]))
  return fitness

def mutate(dna):
  """Para cada gene no DNA, há um 1/mutation_chance chance de que isso será trocado com um carácter aleatório.
  Isso garante diversidade na população, e garante que é difícil ficar preso em um minima local.
  population, and ensures that is difficult to get stuck in local minima.
  """
  dna_out = ""
  mutation_chance = 100
  for c in range(DNA_SIZE):
    if int(random.random()*mutation_chance) == 1:
      dna_out += random_char()
    else:
      dna_out += dna[c]
  return dna_out

def crossover(dna1, dna2):
  """
  Slices both dna1 and dna2 into two parts at a random index within their
  length and merges them. Both keep their initial sublist up to the crossover
  index, but their ends are swapped.
  """
  pos = int(random.random()*DNA_SIZE)
  return (dna1[:pos]+dna2[pos:], dna2[:pos]+dna1[pos:])

#
# Main driver
# Generate a population and simulate GENERATIONS generations.
#

if __name__ == "__main__":
  # Generate initial population. This will create a list of POP_SIZE strings,
  # each initialized to a sequence of random characters.
  population = random_population()

  # Simulate all of the generations.
  for generation in range(GENERATIONS):
    print ("Geração %s... Amostra aleatória: '%s'" % (generation, population[0]))
    weighted_population = []

    # Add individuals and their respective fitness levels to the weighted
    # population list. This will be used to pull out individuals via certain
    # probabilities during the selection phase. Then, reset the population list
    # so we can repopulate it after selection.
    for individual in population:
      fitness_val = fitness(individual)

      # Generate the (individual,fitness) pair, taking in account whether or
      # not we will accidently divide by zero.
      if fitness_val == 0:
        pair = (individual, 1.0)
      else:
        pair = (individual, 1.0/fitness_val)

      weighted_population.append(pair)

    population = []

    # Select two random individuals, based on their fitness probabilites, cross
    # their genes over at a random point, mutate them, and add them back to the
    # population for the next iteration.
    for _ in range(POP_SIZE//2):
      # Selection
      ind1 = weighted_choice(weighted_population)
      ind2 = weighted_choice(weighted_population)

      # Crossover
      ind1, ind2 = crossover(ind1, ind2)

      # Mutate and add back into the population.
      population.append(mutate(ind1))
      population.append(mutate(ind2))

  # Display the highest-ranked string after all generations have been iterated
  # over. This will be the closest string to the OPTIMAL string, meaning it
  # will have the smallest fitness value. Finally, exit the program.
  fittest_string = population[0]
  minimum_fitness = fitness(population[0])

  for individual in population:
    ind_fitness = fitness(individual)
    if ind_fitness <= minimum_fitness:
      fittest_string = individual
      minimum_fitness = ind_fitness

  print ("Fittest String: %s" % fittest_string)
  exit(0)
